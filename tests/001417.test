js.compile.ignore=true
=====
>>> main.whiley
type State is { int[] mem }
type Inc is { int rd }
type AddC is { int rd, int c }

property exec(State st, Inc insn) -> (State ns):
   return st{mem:=st.mem[insn.rd := st.mem[insn.rd] + 1]}

property exec(State st, AddC insn) -> (State ns):
   return st{mem:=st.mem[insn.rd := st.mem[insn.rd] + insn.c]}

// bisimulation
method bisim(State st, int reg)
requires reg >= 0
// Ensure register is in bounds
requires |st.mem| > reg:
   State st1 = exec(st,{rd:reg})
   State st2 = exec(st,AddC{rd:reg,c:2})
   assert st1 == st2

public export method test():
   bisim({mem:[1]},0)
   bisim({mem:[1,2]},0)
   bisim({mem:[1,2]},1)
   bisim({mem:[1,2,3]},0)
   bisim({mem:[1,2,3]},1)
   bisim({mem:[1,2,3]},2)
---
E705 main.whiley 18,10:19
E722 main.whiley 18,10:19
=====
>>> main.whiley 17:18
   State st2 = exec(st,AddC{rd:reg,c:1})
---